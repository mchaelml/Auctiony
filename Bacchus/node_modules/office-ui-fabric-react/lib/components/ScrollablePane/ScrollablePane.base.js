"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var PropTypes = require("prop-types");
var Utilities_1 = require("../../Utilities");
var getClassNames = Utilities_1.classNamesFunction();
var ScrollablePaneBase = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollablePaneBase, _super);
    function ScrollablePaneBase(props) {
        var _this = _super.call(this, props) || this;
        _this._root = Utilities_1.createRef();
        _this._stickyAboveRef = Utilities_1.createRef();
        _this._stickyBelowRef = Utilities_1.createRef();
        _this.subscribe = function (handler) {
            _this._subscribers.add(handler);
        };
        _this.unsubscribe = function (handler) {
            _this._subscribers.delete(handler);
        };
        _this.addStickyHeader = function (sticky) {
            _this._addSticky(sticky, _this._stickyAbove, function () {
                if (_this._stickyAboveRef.current) {
                    _this._stickyAboveRef.current.appendChild(sticky.content);
                }
            });
        };
        _this.addStickyFooter = function (sticky) {
            _this._addSticky(sticky, _this._stickyBelow, function () {
                if (_this._stickyBelowRef.current) {
                    _this._stickyBelowRef.current.insertBefore(sticky.content, _this._stickyBelowRef.current.firstChild);
                }
            });
        };
        _this.removeStickyHeader = function (sticky) {
            _this._removeSticky(sticky, _this._stickyAbove, _this._stickyAboveRef.current);
        };
        _this.removeStickyFooter = function (sticky) {
            _this._removeSticky(sticky, _this._stickyBelow, _this._stickyBelowRef.current);
        };
        _this.notifySubscribers = function (sort) {
            _this._subscribers.forEach(function (handle) {
                if (_this._stickyAboveRef.current && _this._stickyBelowRef.current) {
                    handle(_this._stickyAboveRef.current.getBoundingClientRect(), _this._stickyBelowRef.current.getBoundingClientRect());
                }
            });
            if (_this._stickyAbove.size > 1) {
                _this._sortStickies(_this._stickyAbove, _this._stickyAboveRef.current);
            }
            if (_this._stickyBelow.size > 1) {
                _this._sortStickies(_this._stickyBelow, _this._stickyBelowRef.current);
            }
        };
        _this.getScrollPosition = function () {
            if (_this._root.current) {
                return _this._root.current.scrollTop;
            }
            return 0;
        };
        _this._setPlaceholderHeights = function (stickies) {
            stickies.forEach(function (sticky, idx) {
                sticky.setPlaceholderHeight(sticky.content.clientHeight);
            });
        };
        _this._subscribers = new Set();
        _this._stickyAbove = new Set();
        _this._stickyBelow = new Set();
        return _this;
    }
    Object.defineProperty(ScrollablePaneBase.prototype, "root", {
        get: function () {
            return this._root.current;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollablePaneBase.prototype, "stickyAbove", {
        get: function () {
            return this._stickyAboveRef.current;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollablePaneBase.prototype, "stickyBelow", {
        get: function () {
            return this._stickyBelowRef.current;
        },
        enumerable: true,
        configurable: true
    });
    ScrollablePaneBase.prototype.getChildContext = function () {
        return {
            scrollablePane: {
                subscribe: this.subscribe,
                unsubscribe: this.unsubscribe,
                addStickyHeader: this.addStickyHeader,
                removeStickyHeader: this.removeStickyHeader,
                addStickyFooter: this.addStickyFooter,
                removeStickyFooter: this.removeStickyFooter,
                notifySubscribers: this.notifySubscribers
            }
        };
    };
    ScrollablePaneBase.prototype.componentDidMount = function () {
        this._events.on(this._root.current, 'scroll', this.notifySubscribers);
        this._events.on(window, 'resize', this._onWindowResize);
    };
    ScrollablePaneBase.prototype.componentWillUnmount = function () {
        this._events.off(this._root.current);
        this._events.off(window);
    };
    ScrollablePaneBase.prototype.componentDidUpdate = function (prevProps) {
        var initialScrollPosition = this.props.initialScrollPosition;
        if (this._root.current && initialScrollPosition && prevProps.initialScrollPosition !== initialScrollPosition) {
            this._root.current.scrollTop = initialScrollPosition;
        }
    };
    ScrollablePaneBase.prototype.render = function () {
        var _a = this.props, className = _a.className, theme = _a.theme, getStyles = _a.getStyles;
        var classNames = getClassNames(getStyles, {
            theme: theme,
            className: className
        });
        return (React.createElement("div", tslib_1.__assign({}, Utilities_1.getNativeProps(this.props, Utilities_1.divProperties), { ref: this._root, className: classNames.root, "data-is-scrollable": true }),
            React.createElement("div", { ref: this._stickyAboveRef, className: classNames.stickyAbove }),
            React.createElement("div", { ref: this._stickyBelowRef, className: classNames.stickyBelow }),
            this.props.children));
    };
    ScrollablePaneBase.prototype.forceLayoutUpdate = function () {
        this._onWindowResize();
    };
    ScrollablePaneBase.prototype._addSticky = function (sticky, stickyList, addStickyToContainer) {
        if (!stickyList.has(sticky)) {
            stickyList.add(sticky);
            addStickyToContainer();
            sticky.content.addEventListener('transitionend', this._setPlaceholderHeights.bind(null, stickyList), false);
            if (sticky.props.stickyClassName) {
                this._async.setTimeout(function () {
                    if (sticky.props.stickyClassName) {
                        sticky.content.children[0].classList.add(sticky.props.stickyClassName);
                    }
                }, 1);
            }
            this._setPlaceholderHeights(stickyList);
        }
    };
    ScrollablePaneBase.prototype._removeSticky = function (sticky, stickyList, container) {
        if (container && stickyList.has(sticky)) {
            sticky.content.removeEventListener('transitionend', this._setPlaceholderHeights.bind(null, stickyList, container));
            stickyList.delete(sticky);
        }
    };
    ScrollablePaneBase.prototype._onWindowResize = function () {
        var _this = this;
        this._async.setTimeout(function () {
            _this.notifySubscribers();
            _this._setPlaceholderHeights(_this._stickyAbove);
            _this._setPlaceholderHeights(_this._stickyBelow);
        }, 5);
    };
    ScrollablePaneBase.prototype._sortStickies = function (stickyList, container) {
        var _this = this;
        // No sorting needed if there is no container
        if (!container) {
            return;
        }
        var stickyArr = Array.from(stickyList);
        stickyArr = stickyArr.sort(function (a, b) {
            var aOffset = _this._calculateOffsetParent(a.root.current);
            var bOffset = _this._calculateOffsetParent(b.root.current);
            return aOffset - bOffset;
        });
        // Get number of elements that is already in order.
        var elementsInOrder = 0;
        while (elementsInOrder < container.children.length && elementsInOrder < stickyArr.length) {
            if (container.children[elementsInOrder] === stickyArr[elementsInOrder].content) {
                ++elementsInOrder;
            }
            else {
                break;
            }
        }
        // Remove elements that is not in order if exist.
        for (var i = container.children.length - 1; i >= elementsInOrder; --i) {
            container.removeChild(container.children[i]);
        }
        // Append further elements if needed.
        for (var i = elementsInOrder; i < stickyArr.length; ++i) {
            container.appendChild(stickyArr[i].content);
        }
    };
    ScrollablePaneBase.prototype._calculateOffsetParent = function (ele) {
        var offset = 0;
        while (ele && this._root.current && ele.offsetParent !== this._root.current.offsetParent) {
            offset += ele.offsetTop;
            if (ele.parentElement) {
                ele = ele.parentElement;
            }
        }
        return offset;
    };
    ScrollablePaneBase.childContextTypes = {
        scrollablePane: PropTypes.object
    };
    ScrollablePaneBase = tslib_1.__decorate([
        Utilities_1.customizable('ScrollablePane', ['theme'])
    ], ScrollablePaneBase);
    return ScrollablePaneBase;
}(Utilities_1.BaseComponent));
exports.ScrollablePaneBase = ScrollablePaneBase;
//# sourceMappingURL=ScrollablePane.base.js.map