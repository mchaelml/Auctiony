{"version":3,"file":"ScrollablePane.Default.Example.js","sourceRoot":"../src/","sources":["components/ScrollablePane/examples/ScrollablePane.Default.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4EAA2E;AAC3E,4DAA+E;AAC/E,+DAAmD;AACnD,yCAAuC;AAEvC;IAAkD,wDAAe;IAAjE;;IA8CA,CAAC;IA5CQ,6CAAM,GAAb;QACE,IAAM,YAAY,GAAkB,EAAE,CAAC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;QAED,OAAO,CACL,oBAAC,+BAAc,IAAC,SAAS,EAAC,8BAA8B,IACpD,YAAY,CAAC,GAAG,CAAC,UAAC,GAAG;YACrB,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CACa,CAClB,CAAC;IACJ,CAAC;IAEO,sDAAe,GAAvB;QACE,IAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAClC,IAAI,KAAK,GAAG,GAAG,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;SAC9D;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,yDAAkB,GAA1B,UAA2B,KAAa;QACtC,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAErC,OAAO,CACL,6BAAK,GAAG,EAAG,KAAK;YACd,oBAAC,eAAM,IACL,cAAc,EAAG,2BAAkB,CAAC,IAAI,EACxC,eAAe,EAAC,WAAW,EAC3B,qBAAqB,EAAG,KAAK;gBAE7B,6BAAK,SAAS,EAAC,QAAQ;;oBACD,KAAK,GAAG,CAAC,CACzB,CACC;YACT,6BAAK,SAAS,EAAC,aAAa,IACxB,wBAAK,CAAC,GAAG,CAAC,CACR,CACF,CACP,CAAC;IACJ,CAAC;IACH,mCAAC;AAAD,CAAC,AA9CD,CAAkD,KAAK,CAAC,SAAS,GA8ChE;AA9CY,oEAA4B","sourcesContent":["import * as React from 'react';\r\nimport { ScrollablePane } from 'office-ui-fabric-react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from 'office-ui-fabric-react/lib/Sticky';\r\nimport { lorem } from '@uifabric/example-app-base';\r\nimport './ScrollablePane.Example.scss';\r\n\r\nexport class ScrollablePaneDefaultExample extends React.Component {\r\n\r\n  public render(): JSX.Element {\r\n    const contentAreas: JSX.Element[] = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      contentAreas.push(this._createContentArea(i));\r\n    }\r\n\r\n    return (\r\n      <ScrollablePane className='scrollablePaneDefaultExample'>\r\n        { contentAreas.map((ele) => {\r\n          return ele;\r\n        }) }\r\n      </ScrollablePane>\r\n    );\r\n  }\r\n\r\n  private _getRandomColor(): string {\r\n    const letters = 'BCDEF'.split('');\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * letters.length)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  private _createContentArea(index: number): JSX.Element {\r\n    const style = this._getRandomColor();\r\n\r\n    return (\r\n      <div key={ index }>\r\n        <Sticky\r\n          stickyPosition={ StickyPositionType.Both }\r\n          stickyClassName='largeFont'\r\n          stickyBackgroundColor={ style }\r\n        >\r\n          <div className='sticky'>\r\n            Sticky Component #{ index + 1 }\r\n          </div>\r\n        </Sticky>\r\n        <div className='textContent'>\r\n          { lorem(200) }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}