define(["require", "exports", "../../Styling"], function (require, exports, Styling_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GlobalClassNames = {
        ratingStar: 'ms-RatingStar-container',
        ratingStarBack: 'ms-RatingStar-back',
        ratingStarFront: 'ms-RatingStar-front',
        ratingButton: 'ms-Rating-button',
        rootIsSmall: 'ms-Rating--small',
        rootIsLarge: 'ms-Rating--large',
        labelText: 'ms-Rating-labelText',
        ratingFocusZone: 'ms-Rating-focuszone',
    };
    function getStyles(props) {
        var disabled = props.disabled, theme = props.theme;
        var semanticColors = theme.semanticColors, palette = theme.palette;
        var classNames = Styling_1.getGlobalClassNames(GlobalClassNames, theme);
        var ratingSmallIconSize = '16px';
        var ratingLargeIconSize = '20px';
        return {
            ratingStar: [
                classNames.ratingStar,
                {
                    display: 'inline-block',
                    position: 'relative'
                }
            ],
            ratingStarBack: [
                classNames.ratingStarBack,
                {
                    // TODO: Use a proper semantic color for this
                    color: palette.neutralTertiary,
                    width: '100%'
                },
                disabled && {
                    color: semanticColors.disabledBodyText,
                    selectors: (_a = {},
                        _a[Styling_1.HighContrastSelector] = {
                            color: 'GrayText'
                        },
                        _a)
                }
            ],
            ratingStarFront: [
                classNames.ratingStarFront,
                {
                    position: 'absolute',
                    height: '100 %',
                    left: '0',
                    top: '0',
                    textAlign: 'center',
                    verticalAlign: 'middle',
                    overflow: 'hidden',
                    color: semanticColors.bodyTextChecked,
                    selectors: (_b = {},
                        _b[Styling_1.HighContrastSelector] = {
                            'color': 'Highlight'
                        },
                        _b)
                }
            ],
            ratingButton: [
                Styling_1.getFocusStyle(theme, 0),
                classNames.ratingButton,
                {
                    background: 'none',
                    backgroundColor: 'transparent',
                    margin: '3px 3px 0px 0px',
                    padding: '0px',
                    border: 'none',
                    cursor: 'pointer',
                    selectors: {
                        '&:disabled': {
                            cursor: 'default'
                        },
                        '&[disabled]': {
                            cursor: 'default'
                        }
                    }
                },
                disabled && {
                    cursor: 'default'
                },
            ],
            rootIsSmall: [
                classNames.rootIsSmall,
                {
                    fontSize: ratingSmallIconSize,
                    lineHeight: ratingSmallIconSize
                }
            ],
            rootIsLarge: [
                classNames.rootIsLarge,
                {
                    fontSize: ratingLargeIconSize,
                    lineHeight: ratingLargeIconSize
                }
            ],
            labelText: [
                classNames.labelText,
                Styling_1.hiddenContentStyle
            ],
            ratingFocusZone: [
                classNames.ratingFocusZone,
                {
                    display: 'inline-block',
                    paddingBottom: '1px'
                }
            ]
        };
        var _a, _b;
    }
    exports.getStyles = getStyles;
});
//# sourceMappingURL=Rating.styles.js.map