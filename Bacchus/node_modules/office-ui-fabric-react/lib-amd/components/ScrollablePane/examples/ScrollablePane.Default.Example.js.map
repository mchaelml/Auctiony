{"version":3,"file":"ScrollablePane.Default.Example.js","sourceRoot":"../src/","sources":["components/ScrollablePane/examples/ScrollablePane.Default.Example.tsx"],"names":[],"mappings":";;;IAMA;QAAkD,wDAAe;QAAjE;;QA8CA,CAAC;QA5CQ,6CAAM,GAAb;YACE,IAAM,YAAY,GAAkB,EAAE,CAAC;YACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/C;YAED,OAAO,CACL,oBAAC,+BAAc,IAAC,SAAS,EAAC,8BAA8B,IACpD,YAAY,CAAC,GAAG,CAAC,UAAC,GAAG;gBACrB,OAAO,GAAG,CAAC;YACb,CAAC,CAAC,CACa,CAClB,CAAC;QACJ,CAAC;QAEO,sDAAe,GAAvB;YACE,IAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAClC,IAAI,KAAK,GAAG,GAAG,CAAC;YAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;aAC9D;YACD,OAAO,KAAK,CAAC;QACf,CAAC;QAEO,yDAAkB,GAA1B,UAA2B,KAAa;YACtC,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAErC,OAAO,CACL,6BAAK,GAAG,EAAG,KAAK;gBACd,oBAAC,eAAM,IACL,cAAc,EAAG,2BAAkB,CAAC,IAAI,EACxC,eAAe,EAAC,WAAW,EAC3B,qBAAqB,EAAG,KAAK;oBAE7B,6BAAK,SAAS,EAAC,QAAQ;;wBACD,KAAK,GAAG,CAAC,CACzB,CACC;gBACT,6BAAK,SAAS,EAAC,aAAa,IACxB,wBAAK,CAAC,GAAG,CAAC,CACR,CACF,CACP,CAAC;QACJ,CAAC;QACH,mCAAC;IAAD,CAAC,AA9CD,CAAkD,KAAK,CAAC,SAAS,GA8ChE;IA9CY,oEAA4B","sourcesContent":["import * as React from 'react';\r\nimport { ScrollablePane } from 'office-ui-fabric-react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from 'office-ui-fabric-react/lib/Sticky';\r\nimport { lorem } from '@uifabric/example-app-base';\r\nimport './ScrollablePane.Example.scss';\r\n\r\nexport class ScrollablePaneDefaultExample extends React.Component {\r\n\r\n  public render(): JSX.Element {\r\n    const contentAreas: JSX.Element[] = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      contentAreas.push(this._createContentArea(i));\r\n    }\r\n\r\n    return (\r\n      <ScrollablePane className='scrollablePaneDefaultExample'>\r\n        { contentAreas.map((ele) => {\r\n          return ele;\r\n        }) }\r\n      </ScrollablePane>\r\n    );\r\n  }\r\n\r\n  private _getRandomColor(): string {\r\n    const letters = 'BCDEF'.split('');\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * letters.length)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  private _createContentArea(index: number): JSX.Element {\r\n    const style = this._getRandomColor();\r\n\r\n    return (\r\n      <div key={ index }>\r\n        <Sticky\r\n          stickyPosition={ StickyPositionType.Both }\r\n          stickyClassName='largeFont'\r\n          stickyBackgroundColor={ style }\r\n        >\r\n          <div className='sticky'>\r\n            Sticky Component #{ index + 1 }\r\n          </div>\r\n        </Sticky>\r\n        <div className='textContent'>\r\n          { lorem(200) }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}