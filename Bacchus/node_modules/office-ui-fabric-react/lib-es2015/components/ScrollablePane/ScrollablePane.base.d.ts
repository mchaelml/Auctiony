/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { BaseComponent } from '../../Utilities';
import { IScrollablePane, IScrollablePaneProps } from './ScrollablePane.types';
import { Sticky } from '../../Sticky';
export interface IScrollablePaneContext {
    scrollablePane: PropTypes.Requireable<object>;
}
export declare class ScrollablePaneBase extends BaseComponent<IScrollablePaneProps, {}> implements IScrollablePane {
    static childContextTypes: React.ValidationMap<IScrollablePaneContext>;
    private _root;
    private _stickyAboveRef;
    private _stickyBelowRef;
    private _subscribers;
    private _stickyAbove;
    private _stickyBelow;
    constructor(props: IScrollablePaneProps);
    readonly root: HTMLDivElement | null;
    readonly stickyAbove: HTMLDivElement | null;
    readonly stickyBelow: HTMLDivElement | null;
    getChildContext(): {
        scrollablePane: {
            subscribe: (handler: (headerBound: ClientRect, footerBound: ClientRect) => void) => void;
            unsubscribe: (handler: (headerBound: ClientRect, footerBound: ClientRect) => void) => void;
            addStickyHeader: (sticky: Sticky) => void;
            removeStickyHeader: (sticky: Sticky) => void;
            addStickyFooter: (sticky: Sticky) => void;
            removeStickyFooter: (sticky: Sticky) => void;
            notifySubscribers: (sort?: boolean | undefined) => void;
        };
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: IScrollablePaneProps): void;
    render(): JSX.Element;
    forceLayoutUpdate(): void;
    subscribe: (handler: (headerBound: ClientRect, footerBound: ClientRect) => void) => void;
    unsubscribe: (handler: (headerBound: ClientRect, footerBound: ClientRect) => void) => void;
    addStickyHeader: (sticky: Sticky) => void;
    addStickyFooter: (sticky: Sticky) => void;
    removeStickyHeader: (sticky: Sticky) => void;
    removeStickyFooter: (sticky: Sticky) => void;
    notifySubscribers: (sort?: boolean | undefined) => void;
    getScrollPosition: () => number;
    private _addSticky(sticky, stickyList, addStickyToContainer);
    private _removeSticky(sticky, stickyList, container);
    private _onWindowResize();
    private _setPlaceholderHeights;
    private _sortStickies(stickyList, container);
    private _calculateOffsetParent(ele);
}
