{"version":3,"file":"ProgressIndicator.base.js","sourceRoot":"../src/","sources":["components/ProgressIndicator/ProgressIndicator.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,aAAa,EACb,kBAAkB,EAClB,YAAY,GACb,MAAM,iBAAiB,CAAC;AAOzB,IAAM,aAAa,GAAG,kBAAkB,EAA0D,CAAC;AAEnG,sDAAsD;AACtD,mDAAmD;AACnD,IAAM,cAAc,GAAG,IAAI,CAAC;AAE5B;;;EAGE;AAEF;IAA2C,iDAA0C;IAOnF,+BAAY,KAA8B;QAA1C,YACE,kBAAM,KAAK,CAAC,SAKb;QAHC,KAAI,CAAC,iBAAiB,CAAC;YACrB,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;;IACL,CAAC;IAEM,sCAAM,GAAb;QACQ,IAAA,eAQQ,EAPZ,gCAAa,EACb,wBAAS,EACT,wBAAS,EACT,4BAAW,EACX,wBAAS,EACT,gBAAK,EACL,gBAAK,CACQ;QAEX,IAAA,eAAuC,EAArC,gBAAK,EAAE,oCAAe,CAAgB;QAE5C,IAAM,UAAU,GAAG,aAAa,CAAC,SAAS,EAAE;YAC1C,KAAK,EAAE,KAAM;YACb,SAAS,WAAA;YACT,SAAS,WAAA;YACT,aAAa,EAAE,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;SAC5D,CAAC,CAAC;QAEH,2BAA2B;QAC3B,IAAI,KAAK,EAAE;YACT,KAAK,GAAG,KAAK,CAAC;SACf;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,SAAS,EAAE;YAC5C,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAgB,GAAG,GAAG,CAAC,CAAC,CAAC;SACtE;QAED,IAAM,iBAAiB,GAAG;YACxB,KAAK,EAAE,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC,SAAS;YACxE,UAAU,EAAE,CAAC,eAAe,KAAK,SAAS,IAAI,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;SACrG,CAAC;QAEF,OAAO,CACL,6BAAK,SAAS,EAAG,UAAU,CAAC,IAAI;YAC9B,6BAAK,SAAS,EAAG,UAAU,CAAC,QAAQ,IAAK,KAAK,CAAQ;YACtD,6BAAK,SAAS,EAAG,UAAU,CAAC,YAAY;gBACtC,6BAAK,SAAS,EAAG,UAAU,CAAC,aAAa,GAAK;gBAC9C,6BACE,SAAS,EAAG,UAAU,CAAC,WAAW,EAClC,KAAK,EAAG,iBAAiB,EACzB,IAAI,EAAC,aAAa,mBACF,CAAC,mBACD,GAAG,mBACH,IAAI,CAAC,KAAK,CAAC,eAAgB,CAAC,oBAC3B,aAAa,GAC9B,CACE;YACN,6BAAK,SAAS,EAAG,UAAU,CAAC,eAAe,IAAK,WAAW,CAAQ,CAC/D,CACP,CAAC;IACJ,CAAC;IAlEa,kCAAY,GAAG;QAC3B,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,EAAE;QACf,KAAK,EAAE,GAAG;KACX,CAAC;IALS,qBAAqB;QADjC,YAAY,CAAC,mBAAmB,EAAE,CAAC,OAAO,CAAC,CAAC;OAChC,qBAAqB,CAoEjC;IAAD,4BAAC;CAAA,AApED,CAA2C,aAAa,GAoEvD;SApEY,qBAAqB","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  classNamesFunction,\r\n  customizable,\r\n} from '../../Utilities';\r\nimport {\r\n  IProgressIndicatorProps,\r\n  IProgressIndicatorStyleProps,\r\n  IProgressIndicatorStyles,\r\n} from './ProgressIndicator.types';\r\n\r\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\r\n\r\n// if the percentComplete is near 0, don't animate it.\r\n// This prevents animations on reset to 0 scenarios\r\nconst ZERO_THRESHOLD = 0.01;\r\n\r\n/**\r\n* ProgressIndicator with no default styles.\r\n* [Use the `getStyles` API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Styling)\r\n*/\r\n@customizable('ProgressIndicator', ['theme'])\r\nexport class ProgressIndicatorBase extends BaseComponent<IProgressIndicatorProps, {}> {\r\n  public static defaultProps = {\r\n    label: '',\r\n    description: '',\r\n    width: 180\r\n  };\r\n\r\n  constructor(props: IProgressIndicatorProps) {\r\n    super(props);\r\n\r\n    this._warnDeprecations({\r\n      title: 'label'\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      ariaValueText,\r\n      barHeight,\r\n      className,\r\n      description,\r\n      getStyles,\r\n      theme,\r\n      title,\r\n    } = this.props;\r\n\r\n    let { label, percentComplete } = this.props;\r\n\r\n    const classNames = getClassNames(getStyles, {\r\n      theme: theme!,\r\n      className,\r\n      barHeight,\r\n      indeterminate: percentComplete === undefined ? true : false,\r\n    });\r\n\r\n    // Handle deprecated value.\r\n    if (title) {\r\n      label = title;\r\n    }\r\n\r\n    if (this.props.percentComplete !== undefined) {\r\n      percentComplete = Math.min(100, Math.max(0, percentComplete! * 100));\r\n    }\r\n\r\n    const progressBarStyles = {\r\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\r\n      transition: (percentComplete !== undefined && percentComplete < ZERO_THRESHOLD) ? 'none' : undefined,\r\n    };\r\n\r\n    return (\r\n      <div className={ classNames.root }>\r\n        <div className={ classNames.itemName }>{ label }</div>\r\n        <div className={ classNames.itemProgress }>\r\n          <div className={ classNames.progressTrack } />\r\n          <div\r\n            className={ classNames.progressBar }\r\n            style={ progressBarStyles }\r\n            role='progressbar'\r\n            aria-valuemin={ 0 }\r\n            aria-valuemax={ 100 }\r\n            aria-valuenow={ Math.floor(percentComplete!) }\r\n            aria-valuetext={ ariaValueText }\r\n          />\r\n        </div>\r\n        <div className={ classNames.itemDescription }>{ description }</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}