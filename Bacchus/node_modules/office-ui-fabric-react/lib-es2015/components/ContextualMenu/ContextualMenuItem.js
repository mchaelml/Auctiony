import * as tslib_1 from "tslib";
import * as React from 'react';
import { hasSubmenu, getIsChecked } from '../../utilities/contextualMenu/index';
import { getRTL } from '../../Utilities';
import { Icon } from '../../Icon';
var renderItemIcon = function (props) {
    var item = props.item, hasIcons = props.hasIcons, classNames = props.classNames;
    // Only present to allow continued use of item.icon which is deprecated.
    var iconProps = item.iconProps, icon = item.icon;
    if (!hasIcons) {
        return null;
    }
    if (item.onRenderIcon) {
        return (item.onRenderIcon(props));
    }
    if (iconProps) {
        return React.createElement(Icon, tslib_1.__assign({}, iconProps, { className: classNames.icon }));
    }
    return React.createElement(Icon, { iconName: icon, className: classNames.icon });
};
var renderCheckMarkIcon = function (_a) {
    var onCheckmarkClick = _a.onCheckmarkClick, item = _a.item, classNames = _a.classNames;
    var isItemChecked = getIsChecked(item);
    if (onCheckmarkClick) {
        var onClick = function (e) { return onCheckmarkClick(item, e); };
        return (React.createElement(Icon, { iconName: isItemChecked ? 'CheckMark' : '', className: classNames.checkmarkIcon, onClick: onClick }));
    }
    return null;
};
var renderItemName = function (_a) {
    var item = _a.item, classNames = _a.classNames;
    if (item.name) {
        return React.createElement("span", { className: classNames.label }, item.name);
    }
    return null;
};
var renderSubMenuIcon = function (_a) {
    var item = _a.item, classNames = _a.classNames;
    if (hasSubmenu(item)) {
        return (React.createElement(Icon, tslib_1.__assign({ iconName: getRTL() ? 'ChevronLeft' : 'ChevronRight' }, item.submenuIconProps, { className: classNames.subMenuIcon })));
    }
    return null;
};
export var ContextualMenuItem = function (props) {
    var item = props.item, classNames = props.classNames;
    return (React.createElement("div", { className: item.split ? classNames.linkContentMenu : classNames.linkContent },
        renderCheckMarkIcon(props),
        renderItemIcon(props),
        renderItemName(props),
        renderSubMenuIcon(props)));
};
//# sourceMappingURL=ContextualMenuItem.js.map