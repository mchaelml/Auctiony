{"version":3,"file":"ContextualMenuSplitButton.types.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuSplitButton.types.ts"],"names":[],"mappings":"","sourcesContent":["\r\nimport { IContextualMenuItem } from '../../ContextualMenu';\r\nimport { IMenuItemClassNames } from './ContextualMenu.classNames';\r\nimport { IContextualMenuItemProps } from './ContextualMenuItem.types';\r\nimport { ContextualMenuSplitButton } from './ContextualMenuSplitButton';\r\n\r\nexport interface IContextualMenuSplitButtonProps extends React.Props<IContextualMenuItem> {\r\n  /**\r\n   * Optional callback to access the ContextualmenuSplitButton interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: ContextualMenuSplitButton | null) => void;\r\n\r\n  /**\r\n   * The item that is used to render the split button.\r\n   */\r\n  item: IContextualMenuItem;\r\n\r\n  /**\r\n   * CSS class to apply to the context menu.\r\n   */\r\n  classNames: IMenuItemClassNames;\r\n\r\n  /**\r\n   * The index number of the split button among all items in the contextual menu including things like dividers and headers.\r\n   */\r\n  index: number;\r\n\r\n  /**\r\n   * The index number of the split button among all items in the contextual menu excluding dividers and headers.\r\n   */\r\n  focusableElementIndex: number;\r\n\r\n  /**\r\n   * The total number of items in the contextual menu.\r\n   */\r\n  totalItemCount: number;\r\n\r\n  /**\r\n   * Whether or not if the item for the split button uses checkmarks.\r\n   */\r\n  hasCheckmarks?: boolean;\r\n\r\n  /**\r\n   * Whether or not the item for the split button uses icons.\r\n   */\r\n  hasIcons?: boolean;\r\n\r\n  /**\r\n   * Method to override the render of the individual menu items.\r\n   * @default ContextualMenuItem\r\n   */\r\n  contextualMenuItemAs?: React.ComponentClass<IContextualMenuItemProps> | React.StatelessComponent<IContextualMenuItemProps>;\r\n\r\n  /**\r\n   * Callback for when the user's mouse enters the split button.\r\n   */\r\n  onItemMouseEnter?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>, target: HTMLElement) => boolean | void;\r\n\r\n  /**\r\n   * Callback for when the user's mouse leaves the split button.\r\n   */\r\n  onItemMouseLeave?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the user's mouse moves in the split button.\r\n   */\r\n  onItemMouseMove?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>, target: HTMLElement) => void;\r\n\r\n  /**\r\n   * Callback for the mousedown event on the icon button in the split menu.\r\n   */\r\n  onItemMouseDown?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the click event on the primary button.\r\n   */\r\n  executeItemClick?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the click event on the icon button from the split button.\r\n   */\r\n  onItemClick?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the click event on the icon button which also takes in a specific HTMLElement that will be focused.\r\n   */\r\n  onItemClickBase?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, target: HTMLElement) => void;\r\n\r\n  /**\r\n   * Callback for keyboard events on the split button.\r\n   */\r\n  onItemKeyDown?: (item: IContextualMenuItem, ev: React.KeyboardEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for touch/pointer events on the split button.\r\n   */\r\n  onTap?: (ev: React.TouchEvent<HTMLElement> | PointerEvent) => void;\r\n}"]}