{
  "_args": [
    [
      "vue-parser@https://registry.npmjs.org/vue-parser/-/vue-parser-1.1.6.tgz",
      "C:\\Users\\mchae\\Desktop\\Bacchus-master\\Bacchus"
    ]
  ],
  "_from": "vue-parser@https://registry.npmjs.org/vue-parser/-/vue-parser-1.1.6.tgz",
  "_id": "vue-parser@1.1.6",
  "_inCache": true,
  "_location": "/vue-parser",
  "_phantomChildren": {},
  "_requested": {
    "name": "vue-parser",
    "raw": "vue-parser@https://registry.npmjs.org/vue-parser/-/vue-parser-1.1.6.tgz",
    "rawSpec": "https://registry.npmjs.org/vue-parser/-/vue-parser-1.1.6.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/vue-parser/-/vue-parser-1.1.6.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/fork-ts-checker-webpack-plugin"
  ],
  "_resolved": "https://registry.npmjs.org/vue-parser/-/vue-parser-1.1.6.tgz",
  "_shasum": "3063c8431795664ebe429c23b5506899706e6355",
  "_shrinkwrap": null,
  "_spec": "vue-parser@https://registry.npmjs.org/vue-parser/-/vue-parser-1.1.6.tgz",
  "_where": "C:\\Users\\mchae\\Desktop\\Bacchus-master\\Bacchus",
  "author": {
    "email": "prograhammer@gmail.com",
    "name": "David Graham"
  },
  "bugs": {
    "url": "https://github.com/prograhammer/vue-parser/issues"
  },
  "dependencies": {
    "parse5": "^3.0.3"
  },
  "description": "Get contents from tags in .vue files (using AST tree).",
  "devDependencies": {
    "chai": "^4.1.2",
    "mocha": "^4.0.1",
    "rimraf": "^2.4.4",
    "tslint": "^5.0.0",
    "tslint-config-standard": "^7.0.0",
    "typescript": "^2.6.2"
  },
  "engines": {
    "node": ">= 4.0.0",
    "npm": ">= 3.0.0"
  },
  "homepage": "https://github.com/prograhammer/vue-parser",
  "keywords": [
    "ast",
    "parser",
    "sfc",
    "vue"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "vue-parser",
  "optionalDependencies": {},
  "private": false,
  "readme": "# Vue Parser\n\n![Important](https://travis-ci.org/prograhammer/vue-parser.svg?branch=master \"Travis CI badge\")\n\nA simple way to parse a `.vue` file's contents (single file component) to get specific content from a\n tag like a template, script, or style tag. \nThe returned content can be padded repeatedly with a specific string so that line numbers are retained\n (ie. good for reporting linting errors). You can also get the full [parse5](https://github.com/inikulin/parse5/blob/master/lib/index.d.ts#L193) \n node/element which includes the location info of where the tag content is located. \n\n# Basic Usage\n\n```javascript\nimport vueParser from 'vue-parser'\n\nconst vueFileContents = `\n<template lang=\"pug\">\n.hello\n  h1 {{ msg }}\n</template>\n\n<script lang=\"js\">\nexport default {\n  name: 'Hello',\n\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  }\n\n}\n</script>\n\n<style>\nh1 {\n  font-weight: normal;\n}\n</style>\n`\n\nconst myScriptContents = vueParser.parse(vueFileContents, 'script', { lang: ['js', 'jsx'] })\n\nconsole.log(myScriptContents)\n\n```\n\nThe console output would like like this \n(notice default padding string is `// ` since comments are typically ignored by linters/compilers/etc.):  \n\n```text\n// \n// \n// \n// \n// \n// \nexport default {\n  name: 'Hello',\n\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  }\n\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prograhammer/vue-parser.git"
  },
  "scripts": {
    "build": "npm run clean && npm run compile",
    "clean": "rimraf lib",
    "compile": "tsc ",
    "test": "npm run build && mocha -R spec ./test"
  },
  "typings": "./lib/index.d.ts",
  "version": "1.1.6"
}
